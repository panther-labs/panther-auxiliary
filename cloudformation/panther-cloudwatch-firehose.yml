# Copyright (C) 2020 Panther Labs Inc
#
# Panther Enterprise is licensed under the terms of a commercial license available from
# Panther Labs Inc ("Panther Commercial License") by contacting contact@runpanther.com.
# All use, distribution, and/or modification of this software, whether commercial or non-commercial,
# falls under the Panther Commercial License to the extent it is permitted.

AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure to deliver CloudWatch log group to Panther.

Mappings:
  # DO NOT EDIT PantherParameters section. Panther application relies on the exact format (including comments)
  # in order to replace the default values with an appropriate ones.
  PantherParameters:
    MasterAccountId:
      Value: '' # MasterAccountId
    CloudwatchLogGroupName:
      Value: '' # CloudwatchLogGroupName
    SubscriptionFilterPattern:
      Value: '' # SubscriptionFilterPattern
    ManagedBucketNotifications:
      Value: '' # ManagedBucketNotifications

Parameters:
  MasterAccountId:
    Type: String
    Description: DO NOT EDIT MANUALLY! Parameter is already populated with the appropriate value.
    Default: ''
  CloudwatchLogGroupName:
    Type: String
    Description: DO NOT EDIT MANUALLY! Parameter is already populated with the appropriate value.
    Default: ''
  SubscriptionFilterPattern:
    Type: String
    Default: ' '
    Description: DO NOT EDIT MANUALLY! Parameter is already populated with the appropriate value.
  ManagedBucketNotifications:
    Type: String
    Description: DO NOT EDIT MANUALLY! Parameter is already populated with the appropriate value.
    Default: 'false'
    AllowedValues: ['true', 'false']

Conditions:
  # Condition to define if the template is generated by panther backend
  IsGenerated: !Not [!Equals ['', !FindInMap [PantherParameters, MasterAccountId, Value]]]

  # If user opted to allow Panther configure their bucket SNS notifications,
  # extra policies are added to the LogProcessingRole so that Panther can create the SNS topic,
  # subscribe it to Panther's input data queue and configure bucket notifications.
  HasManagedBucketNotifications: !Or
    - !Equals ['true', !FindInMap [PantherParameters, ManagedBucketNotifications, Value]]
    - !Equals ['true', !Ref ManagedBucketNotifications]

Resources:
  # IAM Permissions - Roles and Policies
  LogProcessingRole:
    # The role to be assumed by Panther log processor to process incoming data and optionally set up and check notifications
    # NOTE: needs to be kept in sync with panther-log-analysis-iam.yml
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'PantherLogProcessingRole-${AWS::StackName}'
      MaxSessionDuration: 3600 # 1 hour
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !If
                - IsGenerated
                - !Sub
                  - 'arn:${Partition}:iam::${Mapping}:root'
                  - Partition: !Ref AWS::Partition
                    Mapping: !FindInMap [PantherParameters, MasterAccountId, Value]
                - !Sub arn:${AWS::Partition}:iam::${MasterAccountId}:root
            Action: sts:AssumeRole
            Condition:
              Bool:
                aws:SecureTransport: true
      Policies:
        - PolicyName: ReadData
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - !GetAtt FirehoseBucket.Arn
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !GetAtt FirehoseBucket.Arn
                  - !Sub ${FirehoseBucket.Arn}/*
      Tags:
        - Key: Application
          Value: Panther

  CloudwatchFirehoseRole:
    # An IAM role that can write to Firehose to be assumed by CloudWatch logs service
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: panther-cloudwatch-firehose-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - firehose:*
                Resource: !GetAtt PantherFirehose.Arn

  FirehoseS3Role:
    # An IAM role that can write to the S3 bucket to be assumed by Firehose service
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: panther-firehose-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !GetAtt FirehoseBucket.Arn
                  - !Sub ${FirehoseBucket.Arn}/*

  # Policies for allowing Panther to configure user's bucket notifications.
  ManagePantherTopic:
    # NOTE: needs to be kept in sync with panther-log-analysis-iam.yml
    # An IAM policy to allow LogProcessingRole to set up and manage an SNS topic for panther notifications
    Type: AWS::IAM::Policy
    Condition: HasManagedBucketNotifications
    Properties:
      Roles:
        - !Ref LogProcessingRole
      PolicyName: ManagePantherTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:*
            Resource: !Sub 'arn:${AWS::Partition}:sns:*:${AWS::AccountId}:panther-notifications-topic'
  GetPutBucketNotifications:
    # NOTE: needs to be kept in sync with panther-log-analysis-iam.yml
    # An IAM policy to allow LogProcessingRole to set up and check bucket notifications for the FirehoseBucket
    Type: AWS::IAM::Policy
    Condition: HasManagedBucketNotifications
    Properties:
      Roles:
        - !Ref LogProcessingRole
      PolicyName: GetPutBucketNotifications
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketNotification
              - s3:PutBucketNotification
            Resource:
              - !GetAtt FirehoseBucket.Arn

  # Cloudwatch Subscription and Firehose Resources
  FirehoseBucket:
    # The S3 bucket where logs are written to.
    # We export its name to 'FirehoseBucket' output
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Id: WeekExpiration
            ExpirationInDays: 7
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  PantherFirehose:
    # A KinesisFirehose delivery stream that aggregates the incoming logs
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN: !GetAtt FirehoseBucket.Arn # Writes to the bucket we're creating
        BufferingHints:
          IntervalInSeconds: 300 # 5min
          SizeInMBs: 128 # Maximum
        RoleARN: !GetAtt FirehoseS3Role.Arn # Assumes FirehoseS3Role

  CloudwatchSubscriptionFilter:
    # A CloudWatch logs subscription filter that filters logs to be delivered to Firehose
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt PantherFirehose.Arn
      FilterPattern: !If
        - IsGenerated
        - !FindInMap [PantherParameters, SubscriptionFilterPattern, Value]
        - !Ref SubscriptionFilterPattern
      LogGroupName: !If
        - IsGenerated
        - !FindInMap [PantherParameters, CloudwatchLogGroupName, Value]
        - !Ref CloudwatchLogGroupName
      RoleArn: !GetAtt CloudwatchFirehoseRole.Arn

Outputs:
  Bucket:
    Description: S3 Bucket containing the data
    Value: !Ref FirehoseBucket
  RoleARN:
    Description: The ARN of the log processing role that Panther will use to read s3 objects.
    Value: !GetAtt LogProcessingRole.Arn
